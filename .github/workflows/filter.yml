name: Filter PGN by Player Wins/Draws (Fixed & Sorted)

on:
  workflow_dispatch:
    inputs:
      input_pgn:
        description: "Enter the PGN file name"
        required: true
        default: ".pgn"
      player_name:
        description: "Enter the player's name to filter games for"
        required: true
        default: " "
      output_pgn:
        description: "Enter the filtered PGN output file name"
        required: true
        default: "FilteredGames.pgn"

jobs:
  filter:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install python-chess

      - name: Run PGN Filter (With Fix & Sort)
        run: |
          python - << 'EOF'
          import chess.pgn
          from pathlib import Path
          from datetime import datetime

          input_pgn = "${{ github.event.inputs.input_pgn }}"
          output_pgn = "${{ github.event.inputs.output_pgn }}"
          player_name = "${{ github.event.inputs.player_name }}".strip().lower()

          input_path = Path(input_pgn)
          if not input_path.exists():
              raise FileNotFoundError(f"❌ Input file not found: {input_pgn}")

          count_in, count_out, fixed_games = 0, 0, 0
          games_list = []

          def sanitize_game(game):
              """Rebuild game move-by-move and trim illegal moves."""
              board = game.board()
              new_game = chess.pgn.Game()
              new_game.headers = game.headers.copy()
              node = new_game
              fixed = False

              for move in game.mainline_moves():
                  if move in board.legal_moves:
                      board.push(move)
                      node = node.add_variation(move)
                  else:
                      fixed = True
                      break
              return new_game, fixed

          with open(input_path, encoding="utf-8") as infile:
              while True:
                  game = chess.pgn.read_game(infile)
                  if game is None:
                      break
                  count_in += 1

                  white = game.headers.get("White", "").lower()
                  black = game.headers.get("Black", "").lower()
                  result = game.headers.get("Result", "")
                  date = game.headers.get("Date", "0000.00.00")

                  # Filter only player's games
                  if player_name not in white and player_name not in black:
                      continue

                  # Filter only wins/draws
                  if player_name in white and result not in ["1-0", "1/2-1/2"]:
                      continue
                  if player_name in black and result not in ["0-1", "1/2-1/2"]:
                      continue

                  # Fix illegal moves
                  fixed_game, was_fixed = sanitize_game(game)
                  if was_fixed:
                      fixed_games += 1

                  games_list.append((date, fixed_game))

          if not games_list:
              print(f"⚠️ No matching games found for '{player_name}' with wins/draws.")
          else:
              # Sort by date
              def date_key(item):
                  d = item[0]
                  try:
                      return datetime.strptime(d, "%Y.%m.%d")
                  except:
                      return datetime.min

              games_list.sort(key=date_key)

              with open(output_pgn, "w", encoding="utf-8") as outfile:
                  for _, g in games_list:
                      outfile.write(str(g) + "\n\n")
                      count_out += 1

          print(f"✅ Filtered {count_out}/{count_in} games for '{player_name}' saved to '{output_pgn}'")
          if fixed_games:
              print(f"🔧 Fixed illegal moves in {fixed_games} games.")
          EOF

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Commit and Push Filtered PGN
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f "${{ github.event.inputs.output_pgn }}" ]; then
            git add "${{ github.event.inputs.output_pgn }}"
            git commit -m "Filtered PGN: Wins/Draws (Fixed & Sorted) for player ${{ github.event.inputs.player_name }}" || echo "No changes to commit"
            git push
          else
            echo "⚠️ No output file to commit."
          fi
